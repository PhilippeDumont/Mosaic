// Generated by CoffeeScript 1.4.0
(function() {
  var Element, Library, View, Weather, currentBigImage, currentMovie, currentPosition, display, fs, library, readBigImage, readMovie, readSmalImage, run, sizeOf, state, view;

  fs = require('fs');

  sizeOf = require('image-size');

  /*
  Element can be a picture or a video.
  type : movie or picture
  link : It the absolute link to this element
  */


  Element = (function() {

    function Element(type, link, width, height) {
      this.type = type;
      this.link = link;
      this.width = width;
      this.height = height;
    }

    return Element;

  })();

  /*
  View display an Element at the specified x and y position.
  */


  View = (function() {

    function View() {}

    View.prototype.getHtml = function(element, x, y) {
      var html;
      this.element = element;
      this.x = x;
      this.y = y;
      html = '';
      if (this.element.type === 'image') {
        html += '<img src="';
        html += this.element.link;
        html += '" style="position:absolute; top:';
        html += this.x * this.element.height;
        html += 'px; left:';
        html += this.y * this.element.width;
        html += 'px;"';
        return html += '/>';
      } else if (this.element.type === 'video') {
        html += '<video id="video" autoplay ';
        html += 'src="';
        html += this.element.link;
        html += '">';
        return html += '</video>';
      }
    };

    return View;

  })();

  Weather = (function() {

    function Weather(location) {
      this.location = location != null ? location : 'Luxembourg';
      this.info;
    }

    Weather.prototype.test = function() {
      return console.log(this.info);
    };

    Weather.prototype.getWheater = function() {
      var url;
      url = 'http://api.openweathermap.org/data/2.5/weather?q=Luxembourg,lu';
      return $.getJSON(url, function(data) {
        this.info = data;
        return this.test();
      });
    };

    return Weather;

  })();

  /*
  Library check in the file system to create all the Elements and put this element
  in arrays.
  */


  Library = (function() {

    function Library(imageDirectory, movieDirectory) {
      this.imageDirectory = imageDirectory;
      this.movieDirectory = movieDirectory;
      this.images = [];
      this.movies = [];
      this.bigImages = [];
      this.listElements();
    }

    Library.prototype.listElements = function() {
      var dimensions, file, image, imageFiles, link, movie, movieFiles, _i, _j, _len, _len1, _results;
      this.images = [];
      imageFiles = fs.readdirSync(this.imageDirectory);
      for (_i = 0, _len = imageFiles.length; _i < _len; _i++) {
        file = imageFiles[_i];
        link = './images/' + file;
        dimensions = sizeOf(link);
        if (dimensions.height > 1080) {
          image = new Element('image', link, dimensions.width, dimensions.height);
          this.bigImages.push(image);
        } else {
          image = new Element('image', link, dimensions.width, dimensions.height);
          this.images.push(image);
        }
      }
      this.movies = [];
      movieFiles = fs.readdirSync(this.movieDirectory);
      _results = [];
      for (_j = 0, _len1 = movieFiles.length; _j < _len1; _j++) {
        file = movieFiles[_j];
        link = './video/' + file;
        movie = new Element('video', link, 0, 0);
        _results.push(this.movies.push(movie));
      }
      return _results;
    };

    return Library;

  })();

  library = new Library('./images/', './video/');

  view = new View();

  display = function(elements) {
    var $el, i, image, template, x, y, _i, _len;
    template = '';
    i = 0;
    x = 0;
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      image = elements[_i];
      y = i % 3;
      template += view.getHtml(image, x, y);
      if (y === 2) {
        x++;
      }
      i++;
    }
    $el = $('#app');
    return $el.html(template);
  };

  state = 0;

  currentPosition = 0;

  currentBigImage = 0;

  currentMovie = 0;

  readSmalImage = function() {
    var j, tab;
    if (library.images.length > 0) {
      tab = [];
      j = 0;
      while (j < 9) {
        if (currentPosition >= library.images.length) {
          currentPosition = 0;
        }
        tab.push(library.images[currentPosition]);
        currentPosition++;
        j++;
      }
      display(tab);
    }
    return state = 1;
  };

  readBigImage = function() {
    var tab;
    if (library.bigImages.length > 0) {
      tab = [];
      if (currentBigImage >= library.bigImages.length) {
        currentBigImage = 0;
      }
      tab.push(library.bigImages[currentBigImage]);
      currentBigImage++;
      display(tab);
    }
    return state = 2;
  };

  readMovie = function() {
    var tab;
    if (library.movies.length > 0) {
      tab = [];
      if (currentMovie >= library.movies.length) {
        currentMovie = 0;
      }
      tab.push(library.movies[currentMovie]);
      currentMovie++;
      display(tab);
    }
    return state = 0;
  };

  run = function() {
    var myVideoPlayer, tab;
    tab = [];
    if (state === 0) {
      readSmalImage();
      setTimeout(refresh, 2000);
      return function refresh() {
      run();
    };
    } else if (state === 1) {
      readBigImage();
      setTimeout(refresh, 2000);
      return function refresh() {
      run();
    };
    } else if (state === 2) {
      readMovie();
      myVideoPlayer = document.getElementById('video');
      return myVideoPlayer.addEventListener('loadedmetadata', function() {
        var timeout;
        timeout = myVideoPlayer.duration;
        console.log(timeout);
        setTimeout(refresh, timeout * 1000);
        return function refresh() {
      run();
      };
      });
    }
  };

  setTimeout(refresh, 2000);

  function refresh() {
  run();
};


  //FULL SCREEN
//+++++++++++++++++++++++++++++++++++++++

document.addEventListener("keydown", function(e) {
  if (e.keyCode == 13) {
    toggleFullScreen();
  }
}, false);


function toggleFullScreen() {
  if (!document.fullscreenElement &&    // alternative standard method
      !document.mozFullScreenElement && !document.webkitFullscreenElement) {  // current working methods
    if (document.documentElement.requestFullscreen) {
      document.documentElement.requestFullscreen();
    } else if (document.documentElement.mozRequestFullScreen) {
      document.documentElement.mozRequestFullScreen();
    } else if (document.documentElement.webkitRequestFullscreen) {
      document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
    }
  } else {
    if (document.cancelFullScreen) {
      document.cancelFullScreen();
    } else if (document.mozCancelFullScreen) {
      document.mozCancelFullScreen();
    } else if (document.webkitCancelFullScreen) {
      document.webkitCancelFullScreen();
    }
  }
}
;


}).call(this);
